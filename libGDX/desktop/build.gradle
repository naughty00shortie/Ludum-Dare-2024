sourceCompatibility = 11
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../assets"]

project.ext.mainClassName = "com.mygdx.game.DesktopLauncher"
project.ext.assetsDir = new File("../assets")

import org.gradle.internal.os.OperatingSystem

tasks.register('run', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('debug', JavaExec) {
    dependsOn classes
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}


dist.dependsOn classes

// creates application bundle (executable + runtime)
task javaPackager(type: Exec, dependsOn: dist) {
    workingDir project.projectDir
    def commands = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-outdir', "${buildDir}/distribution",
            '-srcdir', "${buildDir}/libs",
            '-native', 'image',
            '-name', project.appName,
            '-appclass', project.mainClassName,
            '-outfile', 'output'
    ]

    def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (osName.contains('windows')) {
        commands << "-Bicon=${project.projectDir}/logo.ico"
    } else if (osName.contains('linux')) {
        commands << "-Bicon=${project.projectDir}/logo.png"
    } else if (osName.contains('mac')) {
        commands << "-Bicon=${project.projectDir}/logo.icns"
        commands << "-BjvmOptions=-XstartOnFirstThread"
    }

    commandLine = commands
}

// removes bloated runtime created by javapackager
task cleanPackagerRuntime(dependsOn: javaPackager) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.appName}/runtime")
        runtimeFile.deleteDir()
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {
    def jdk = System.getProperty("java.home")

    workingDir project.projectDir
    commandLine = [
            'jlink',
            '-p', "${jdk}/jmods",
            '--add-modules', 'java.base,java.desktop,jdk.unsupported',
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', "${buildDir}/distribution/${project.appName}/runtime"
    ]

    doLast{
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
    }
}


eclipse.project.name = appName + "-desktop"
